//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                 String     @id() @default(uuid())
  name               String?
  email              String?    @unique()
  pictureUrl         String?    @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation    String?
  emailVerified      Boolean?
  status             UserStatus @default(VERIFIED)
  globalRole         String     @default("USER")
  /// @password
  /// @omit
  password           String?
  dateCreated        DateTime   @default(now())
  dateUpdated        DateTime   @default(now()) @updatedAt()
  accounts           Account[]
  sessions           Session[]
  trips              Trip[]     @relation("user")
  ordersAsBuyer      Order[]    @relation("buyer")
  ordersAsSeller     Order[]    @relation("seller")
  reviewsAsReviewer  Review[]   @relation("reviewer")
  reviewsAsReviewee  Review[]   @relation("reviewee")
  messagesAsSender   Message[]  @relation("sender")
  messagesAsReceiver Message[]  @relation("receiver")
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('all', true)
model Trip {
  id                String   @id() @default(uuid())
  departureDate     String?
  arrivalDate       String?
  status            String?
  userId            String?
  user              User?    @relation(fields: [userId], references: [id], name: "user")
  originCityId      String?
  originCity        City?    @relation(fields: [originCityId], references: [id], name: "originCity")
  destinationCityId String?
  destinationCity   City?    @relation(fields: [destinationCityId], references: [id], name: "destinationCity")
  orders            Order[]  @relation("trip")
  dateCreated       DateTime @default(now())
  dateUpdated       DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model City {
  id                     String   @id() @default(uuid())
  name                   String?
  region                 String?
  tripsAsOriginCity      Trip[]   @relation("originCity")
  tripsAsDestinationCity Trip[]   @relation("destinationCity")
  dateCreated            DateTime @default(now())
  dateUpdated            DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Order {
  id          String   @id() @default(uuid())
  quantity    Float?
  price       Float?
  status      String?
  buyerId     String?
  buyer       User?    @relation(fields: [buyerId], references: [id], name: "buyer")
  sellerId    String?
  seller      User?    @relation(fields: [sellerId], references: [id], name: "seller")
  productId   String?
  product     Product? @relation(fields: [productId], references: [id], name: "product")
  tripId      String?
  trip        Trip?    @relation(fields: [tripId], references: [id], name: "trip")
  reviews     Review[] @relation("order")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Product {
  id          String   @id() @default(uuid())
  name        String?
  description String?
  category    String?
  orders      Order[]  @relation("product")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Review {
  id          String   @id() @default(uuid())
  rating      Float?
  comment     String?
  reviewerId  String?
  reviewer    User?    @relation(fields: [reviewerId], references: [id], name: "reviewer")
  revieweeId  String?
  reviewee    User?    @relation(fields: [revieweeId], references: [id], name: "reviewee")
  orderId     String?
  order       Order?   @relation(fields: [orderId], references: [id], name: "order")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Message {
  id          String   @id() @default(uuid())
  content     String?
  timestamp   String?
  senderId    String?
  sender      User?    @relation(fields: [senderId], references: [id], name: "sender")
  receiverId  String?
  receiver    User?    @relation(fields: [receiverId], references: [id], name: "receiver")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}
